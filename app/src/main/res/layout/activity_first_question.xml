<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/qviz"
    tools:context=".FirstQuestion">
    <!-- On va dÃ©finir une vue Ã  l'aide de RelativeLayout.
    RelativeLayout permet de positionner les Ã©lÃ©ments de
    la vue les uns par rapport aux autres.
    Les diffÃ©rents widgets seront ainsi reliÃ©s les uns aux autres.
    On va aussi utiliser match_parent.
    match_parent permet de rendre une vue aussi grande
    que son parent.
    Par exemple , dans ce cas on a utilisÃ©
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    et donc ceci va permettre Ã  la vue de s'Ã©tendre
    en hauteur et en largeur jusqu'Ã  avoir la mÃªme taille
    que le parent.
    on a aussi utilisÃ© android:background afin de dÃ©finir
    une background Ã  la vue.-->
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text=""
        android:textColor="@color/yellow"
        android:layout_marginTop="81dp"
        android:layout_marginLeft="250dp"
        android:id="@+id/timer">

    </TextView>

    <TextView
        android:id="@+id/hint"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:layout_marginLeft="220dp"
        android:layout_marginTop="75dp"
        android:clickable="true"
        android:text="ðŸ’¡"
        android:textColor="@color/yellow"
        android:textSize="25dp"></TextView>

    <TextView
        android:id="@+id/score"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginLeft="70dp"
        android:layout_marginTop="80dp"
        android:gravity="center"
        android:text="Score : 0"
        android:textColor="@color/yellow">

    </TextView>
    <TextView
        android:id="@+id/firstQuestion"
        android:layout_width="270dp"
        android:layout_height="wrap_content"
        android:layout_below="@+id/score"
        android:layout_centerHorizontal="true"
        android:gravity="center"
        android:text="Question 1"
        android:textColor="@color/yellow"></TextView>
<!-- on va dÃ©finir le premier Ã©lÃ©ment de cette activitÃ©.
C'est une TextView, elle a pour layout_width 270dp
et pour layout_height wrap_content.
la valeur du layout_width va permettre d'agrandir la
textView en largeur.
wrap_content va permettre de couvrir le contenu. Le
conteneur sera adaptÃ© Ã  la taille du contenu.
On a ensuite utilisÃ© layout_centerHorizontal afin
de centrer horizontalement le fils par rapport Ã 
son parent.
Puis, on a utilisÃ© android:gravity="center".
gravity va permettre de dÃ©finir la maniÃ¨re avec laquelle
le contenu sera placÃ© dans le conteneur.
Ici, le contenu est placÃ© dans le centre.
AprÃ¨s cela, on a utilisÃ© android:text afin de dÃ©finir
le texte contenu  dans le bouton et on a aussi utilisÃ©
android:textColor afin de dÃ©finir la couleur du texte.
On a aussi affectÃ© un id Ã  cette textView.
-->
    <Button
        android:id="@+id/firstButton"
        android:layout_width="130dp"
        android:layout_height="80dp"
        android:layout_below="@id/firstQuestion"
        android:layout_alignLeft="@id/firstQuestion"
        android:text="RelativeLayout displays child View elements in rows and columns"
        android:layout_marginTop="100dp"
        android:backgroundTint="@color/yellow"
        android:textSize="9dp"
        android:textAllCaps="false"
        android:textColor="@color/black"></Button>
<!--
On a rÃ©alisÃ© la crÃ©ation d'un bouton et on lui a affectÃ©
un id afin de le rÃ©fÃ©rencer plus tard au niveau du code java
et aussi pouvoir l'utiliser comme position relative pour
d'autres Ã©lÃ©ments.
Ensuite, on a affectÃ© une valeur numÃ©rique pour le
layout_width et le layout_height.
Puis, on a utilisÃ© layout_below.
layout_below va permettre de positionner une vue
en dessous de la vue dont a donnÃ© l'id
en paramÃ¨tre.
dans ce cas , on va positionner le bouton avec l'id
first_button en dessous de la textView avec l'id
firstQuestion.
AprÃ¨s cela,on va layout_alignLeft.
layout_alignLeft permet d'aligner la frontiÃ¨re gauche
de la vue donnÃ© avec la frontiÃ¨re gauche de la vue
dont on a donnÃ© l'id en paramÃ¨tre.
Dans ce cas, on va aligner la frontiÃ¨re gauche du
bouton avec l'id firstQuestion avec la frontiÃ¨re gauche
de la vue textView avec l'id firstQuestion.
Ensuite, Ã  l'aide d'android:text, on a ajoutÃ© un texte
au niveau du bouton.
On a dÃ©fini une marge supÃ©rieur Ã  l'aide de margin_Top
et on a changÃ© la couleur du background au jaune Ã  l'aide
de la android:backgroundTint="@color/yellow"
On a aussi changÃ© la taille du texte (9sp) Ã  l'aide
de android:textSize et on a dÃ©sactivÃ© la capitalisation
des mots dans le bouton en utilisant
android:textAllCaps="false".
Enfin, On a changÃ© la couleur du texte dans le bouton au
noir Ã  l'aide de android:textColor="@color/black".
-->
    <Button
        android:id="@+id/secondButton"
        android:layout_width="130dp"
        android:layout_height="80dp"
        android:textSize="9dp"
        android:textAllCaps="false"
        android:layout_below="@id/firstQuestion"
        android:layout_alignRight="@+id/firstQuestion"
        android:text="RelativeLayout specifies how child views are positioned relative to each other "
        android:layout_marginTop="100dp"
        android:backgroundTint="@color/yellow"
        android:textColor="@color/black"></Button>
<!-- On a conservÃ© une grande partie des propriÃ¨tÃ©s
dÃ©finies dans le bouton prÃ©cÃ©dent. Cependant, on n'a
plus la propriÃ¨tÃ© layout_alignLeft comme le bouton
prÃ©cÃ©dent. Elle a Ã©tÃ© changÃ©e Ã  layout_alignRight.
layout_alignRight permet d'aligner la frontiÃ¨re droite
de la vue donnÃ© avec la frontiÃ¨re droite de la vue
dont on a donnÃ© l'id en paramÃ¨tre.
On va ainsi aligner la frontiÃ¨re droite du
bouton secondButton et la frontiÃ¨re droite de la
TextView firstQuestion.
On a aussi attribuÃ© un texte diffÃ©rent Ã  celui du
premier bouton.
-->

    <Button
        android:id="@+id/thirdButton"
        android:layout_width="130dp"
        android:layout_height="80dp"
        android:layout_below="@id/firstButton"
        android:layout_alignLeft="@id/firstButton"
        android:layout_marginTop="30dp"
        android:textSize="9dp"
        android:text="Relative Layout positions each element using x and y values"
        android:backgroundTint="@color/yellow"
        android:textAllCaps="false"
        android:textColor="@color/black"></Button>
<!-- On conservera les mÃªmes attributs utilisÃ©s
 pour le bouton avec l'id firstButton.
Cependant, on changera les valeurs de quelques uns de
ces attributs.
Voici ainsi les changements rÃ©alisÃ©s:
- On va changer la valeur du layout_marginTop Ã  30dp
- On va changer la valeur du layout_alignLeft Ã 
@id/firstButton. Les frontiÃ¨res gauches des deux boutons
seront donc alignÃ©es.
-On va aussi changer la valeur de l'attribut layout_below
Ã  firstButton afin de positionner le bouton avec
l'id thirdButton en dessous du bouton avec l'id
firstButton.-->
    <Button
        android:id="@+id/fourthButton"
        android:layout_width="130dp"
        android:layout_height="80dp"
        android:layout_below="@id/secondButton"
        android:textAllCaps="false"
        android:layout_alignRight="@id/secondButton"
        android:layout_marginTop="30dp"
        android:textSize="9dp"
        android:backgroundTint="@color/yellow"
        android:text="Relative Layout makes element align vertically"
        android:textColor="@color/black"></Button>
    <!-- On conservera les mÃªmes attributs utilisÃ©s
 pour le bouton avec l'id secondButton.
Cependant, on changera les valeurs de quelques uns de
ces attributs.
Voici ainsi les changements rÃ©alisÃ©s:
- On va changer la valeur du layout_marginTop Ã  30dp
- On va changer la valeur du layout_alignRight Ã 
@id/secondButton afin de positionner le bouton avec
l'id fourthButton relativement par rapport au bouton avec
l'id secondButton. Les frontiÃ¨res droites des deux boutons
seront donc alignÃ©es.
-On va aussi changer la valeur de l'attribut layout_below
Ã  secondButton afin de positionner le bouton avec
l'id fourthButton en dessous du bouton avec l'id
secondButton.-->
    <TextView
        android:id="@+id/theQuestion"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@+id/firstQuestion"
        android:layout_marginTop="30dp"
        android:gravity="center"
        android:text="What is the role of RelativeLayout"
        android:textAllCaps="false"
        android:textColor="@color/yellow" />
<!--  On a crÃ©Ã© une nouvelle TextView ayant pour id
theQuestion.
L'attribut layout_width a pour valeur match_parent
afin qu'il puisse s'Ã©tendre et avoir ainsi la largeur
de son parent
L'attribut layout_height a pour valeur wrap_content.
Ainsi, le contenu sera enveloppÃ© au niveau de la hauteur.
L'attribut layout_below a pour valeur la vue avec l'id
firstQuestion.
Donc la textView theQuestion sera positionnÃ©e en dessous
de la TextView firstQuestion
On va ensuite dÃ©finir le marginTop (marge extÃ©rieur) et
on va lui attribuer la valeur 30dp.
Puis , l'attribut gravity qui aura pour valeur center
va permettre de center le contenu au niveau de la vue.
On va enfin attribuer un texte Ã  la textView Ã  l'aide
d'android:text et on va le dÃ©capitaliser en utilisant
android:textAllCaps="false". AprÃ¨s cela, la couleur du
texte sera changÃ©e avec l'attribut textColor qui prend
pour valeur @color/yellow c'est Ã  dire une couleur jaune.
    -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/fourthButton"
        android:layout_marginTop="20dp"
        android:gravity="center"
        android:text="Wrong Answer !"
        android:textColor="@color/red"
        android:id="@+id/wrongAnswer"
        android:textStyle="bold"
        android:visibility="invisible"></TextView>
<!-- Pour cette TextView on aura les mÃªmes layout_width,
layout_height et gravity que la TextView prÃ©cÃ©dente.
On va positionner cette TextView en dessous du bouton
fourthButton en utilisant layout_below="@id/fourthButton.
On va affecter un texte Ã  la TextView qui aura pour
couleur le rouge(android:text="Wrong Answer" et
android:textColor="@color/red").
le texte sera en gras(android:textStyle="bold").
On va aussi lui attribuer un id
(android:text="Wrong Answer !")
Et enfin, on va rendre la textView invisible Ã  partir
de l'attribut visibility qui prendra pour valeur
invisible.-->
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_above="@id/thirdButton"
        android:layout_centerHorizontal="true"
        android:text="Perfect !"
        android:textColor="@color/yellow"
        android:textSize="70sp"
        android:id="@+id/goodAnswer"
        android:visibility="invisible"></TextView>
    <!-- cette Textviwe aura les mÃªmes attributs que la
    TextView wrongAnswer sauf le textStyle.
    Les valeurs des attributs seront cependant modifiÃ©es.
    Les attribut layout_width et layout_height
     auront pour valeur  wrap_content ce qui veut dire
     que le conteneur va envelopper le contenu en
     hauteur et en largeur c'est Ã  dire que plus le
     contenu est grand plus le conteneur s'Ã©tend.
     Dans ce cas, l'utilisation de l'attribut gravity
     devient inutile.
     On va centrer la vue TextView par rapport Ã  son
     parent Ã  l'aide de layout_centerHorizontal.
     On utilisera aussi layout_above="@id/thirdButton"
     pour que cette vue soit placÃ©e en dessus
     du bouton thirdButton et on affectera un id
     goodAnswer Ã  cette vue.-->
    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:backgroundTint="@color/yellow"
        android:textColor="@color/black"
        android:layout_below="@id/goodAnswer"
        android:layout_centerHorizontal="true"
        android:visibility="invisible"
        android:id="@+id/nextQuestion"
        android:text="Next Question"
        ></Button>
    <!--
    On va crÃ©er un bouton et on va lui attribuer
    deux propriÃ©tÃ©s layout_width et layout_height
    qui prendront pour valeur wrap_content.
    La couleur du background sera jaune. cette couleur
    sera affectÃ©e Ã  l'aide de
    android:backgroundTint="@color/yellow".
    Le bouton sera invisible. On rÃ©alisera cela en
    utilisant android:visibility="invisible".
    Ce bouton sera centrÃ© dans la vue Ã  l'aide de
    layout_centerHorizontal="true"
    La couleur du texte dans le bouton sera noire.
    Cette configuration sera rÃ©alisÃ©e Ã  l'aide
    d'android:textColor="@color/black".
    -->
</RelativeLayout>